var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var controls;
(function (controls) {
    var HtmlUtil = util.HtmlUtil;
    (function (SelectionMode) {
        SelectionMode[SelectionMode["None"] = 0] = "None";
        SelectionMode[SelectionMode["Single"] = 1] = "Single";
        SelectionMode[SelectionMode["Multi"] = 2] = "Multi";
        SelectionMode[SelectionMode["Toggle"] = 3] = "Toggle";
    })(controls.SelectionMode || (controls.SelectionMode = {}));
    var SelectionMode = controls.SelectionMode;
    var PagingControls = (function (_super) {
        __extends(PagingControls, _super);
        function PagingControls(elementId, $parent, pageSize) {
            var _this = this;
            _super.call(this, $("<ul id='" + elementId + "' class='paging'>").appendTo($parent));
            this.loadPageHandler = $.noop;
            this.pageSize = pageSize;
            $("<li><a href='#'><span class='glyphicon glyphicon-fast-backward'></span> First</a></li>").appendTo(this.$element)
                .on("click", function (evt) {
                _this.loadPageHandler(0, _this.pageSize);
            });
            $("<li><a href='#'><span class='glyphicon glyphicon-step-backward'></span> Prev</a></li>").appendTo(this.$element)
                .on("click", function (evt) {
                _this.loadPageHandler(Math.max(_this.resultSet.offset - _this.pageSize, 0), _this.pageSize);
            });
            this.$pagingMessage = $("<li class='dt-paging-message'></li>").appendTo(this.$element);
            $("<li><a href='#'>Next <span class='glyphicon glyphicon-step-forward'></span></a></li>").appendTo(this.$element)
                .on("click", function (evt) {
                if (_this.resultSet.offset + _this.pageSize > _this.resultSet.totalItems) {
                    var lastPageSize = (_this.resultSet.totalItems % _this.pageSize) || _this.pageSize;
                    var lastPageOffset = Math.max(_this.resultSet.totalItems - lastPageSize, 0);
                    _this.loadPageHandler(Math.min(_this.resultSet.offset + _this.pageSize, lastPageOffset), lastPageSize);
                }
                else {
                    _this.loadPageHandler(_this.resultSet.offset + _this.pageSize, _this.pageSize);
                }
            });
            $("<li><a href='#'>Last <span class='glyphicon glyphicon-fast-forward'></span></a></li>").appendTo(this.$element)
                .on("click", function (evt) {
                var lastPageSize = (_this.resultSet.totalItems % _this.pageSize) || _this.pageSize;
                var lastPageOffset = Math.max(_this.resultSet.totalItems - lastPageSize, 0);
                _this.loadPageHandler(lastPageOffset, lastPageSize);
            });
        }
        PagingControls.prototype.onLoadPage = function (loadPageHandler) {
            this.loadPageHandler = loadPageHandler || $.noop;
        };
        PagingControls.prototype.update = function (resultSet) {
            this.resultSet = resultSet;
            if ((this.resultSet != null) && (this.resultSet.items != null) && (this.resultSet.items.length > 0)) {
                this.$pagingMessage.text("" + (this.resultSet.offset + 1) + " to " + (this.resultSet.offset + this.resultSet.items.length) + " of " + this.resultSet.totalItems);
            }
            else {
                this.$pagingMessage.text("No Data");
            }
        };
        return PagingControls;
    }(controls.Element));
    controls.PagingControls = PagingControls;
    var DataTable = (function (_super) {
        __extends(DataTable, _super);
        function DataTable(element, settings) {
            var _this = this;
            _super.call(this, element);
            this.sortColumn = null;
            this.selectedIndexes = [];
            this.settings = $.extend({
                selectionMode: SelectionMode.Single,
                showLoadingMessage: true,
                topAlignRows: false,
                pageSize: 50
            }, settings);
            this.pagedDataSource = settings.pagedDataSource;
            this.simpleDataSource = settings.simpleDataSource;
            this.hideRowFunc = settings.hideRow;
            this.columns = settings.columns;
            this.sortColumn = settings.sortColumn;
            this.sortReversed = this.sortColumn && settings.sortReversed;
            // Render the table
            this.renderDataTable();
            // Listen for 'catdv:shown' events (generated by the tab control) and trigger a re-layout
            if (!this.$element.is(':visible')) {
                this.$element.addClass("notify_shown");
                this.$element.on("catdv:shown", function (evt) {
                    _this.updateColumnWidths();
                });
            }
            // Ditto if the window is resized
            $(window).resize(function (evt) {
                _this.updateColumnWidths();
            });
        }
        DataTable.prototype.setColumns = function (columns, pagingOffset) {
            if (pagingOffset === void 0) { pagingOffset = 0; }
            this.renderDataTable(pagingOffset);
        };
        DataTable.prototype.getSelectionMode = function () {
            return this.settings.selectionMode;
        };
        DataTable.prototype.setSelectionMode = function (selectionMode) {
            this.settings.selectionMode = selectionMode;
            this.clearSelection();
        };
        DataTable.prototype.onItemClicked = function (itemClickedHandler) {
            this.itemClickedHandler = itemClickedHandler;
        };
        DataTable.prototype.onSelectionChanged = function (selectionChangedHandler) {
            this.selectionChangedHandler = selectionChangedHandler;
        };
        DataTable.prototype.clearSelection = function () {
            this.selectedIndexes = [];
            this.$element.find("tr").removeClass("selected");
            this.updateActionButtons();
        };
        DataTable.prototype.reload = function (pagingOffset, callback) {
            var _this = this;
            if (pagingOffset === void 0) { pagingOffset = 0; }
            if (callback === void 0) { callback = null; }
            // Only load data if columns have been specified - otherwise defer loading until setColumns() called
            if (this.columns) {
                this.loadData(pagingOffset, function () {
                    _this.fireSelectionChangedEvent(false);
                    if (callback) {
                        if (callback)
                            callback();
                    }
                });
            }
        };
        DataTable.prototype.getSelectedItem = function () {
            return (this.selectedIndexes.length > 0) ? this.resultSet.items[this.selectedIndexes[0]] : null;
        };
        DataTable.prototype.getSelectedItems = function () {
            var _this = this;
            return this.selectedIndexes.map(function (selectedIndex) { return _this.resultSet.items[selectedIndex]; });
        };
        DataTable.prototype.getSelectedElementIDs = function () {
            var _this = this;
            return this.selectedIndexes.map(function (selectedIndex) { return "#" + _this.rowID(selectedIndex); });
        };
        DataTable.prototype.setSelection = function (selectedIndexes) {
            var _this = this;
            this.clearSelection();
            this.selectedIndexes = selectedIndexes;
            this.selectedIndexes.forEach(function (selectedIndex) {
                _this.$element.find("#" + _this.rowID(selectedIndex)).addClass("selected");
            });
            this.updateActionButtons();
        };
        DataTable.prototype.selectAll = function () {
            this.setSelection(this.resultSet.items.map(function (item, i) { return i; }));
        };
        DataTable.prototype.hideRows = function (rowIndexes) {
            var _this = this;
            rowIndexes.forEach(function (rowIndex) {
                $("#" + _this.rowID(rowIndex)).hide();
            });
            this.updateColumnWidths();
        };
        DataTable.prototype.showRows = function (rowIndexes) {
            var _this = this;
            rowIndexes.forEach(function (rowIndex) {
                $("#" + _this.rowID(rowIndex)).show();
            });
            this.updateColumnWidths();
        };
        DataTable.prototype.findItem = function (matchFunction) {
            var data = this.resultSet.items;
            for (var i = 0; i < data.length; i++) {
                if (matchFunction(data[i]))
                    return data[i];
            }
            return null;
        };
        DataTable.prototype.renderDataTable = function (pagingOffset) {
            if (pagingOffset === void 0) { pagingOffset = 0; }
            // Only load data if columns have been specified - otherwise defer loading until setColumns() called           
            if (this.columns) {
                this.renderGrid();
                this.updateColumnWidths();
                if (!this.settings.deferLoading) {
                    this.loadData(pagingOffset);
                }
            }
        };
        DataTable.prototype.renderGrid = function () {
            // render table
            // Table rendered as three separate sections, one table for the header columns, one table for the table body (that will scroll)
            // and one div for the footer. The scrolling body table has a copy of the header, that will be hidden under the fixed header.
            var _this = this;
            // Wrapper
            var html = "<div class='dt-wrapper'>";
            // Header
            html += "<div class='dt-header'>";
            html += "<table class='dt-table'>";
            html += this.renderTHEAD(true);
            html += "</table></div>\n";
            // Body (also has its own copy of the header, which will be rendered 'underneath' the fixed header)
            html += "<div class='dt-body'>";
            html += "<table class='dt-table'>";
            html += this.renderTHEAD(false);
            html += "<tbody>";
            html += "<tr><td colspan=" + this.columns.length + ">";
            if (this.settings.showLoadingMessage)
                html += "<h3 class='loadingMessage'>Loading...</h3>";
            html += "</td></tr>\n";
            html += "</tbody></table></div>\n";
            // Footer (Paging)
            html += "<div class='dt-footer'><div>";
            //  Close Wrapper
            html += "</div>";
            this.$element.html(html);
            this.$wrapper = this.$element.find(".dt-wrapper");
            this.$headerDiv = this.$wrapper.find(".dt-header");
            this.$headerTable = this.$wrapper.find(".dt-header table.dt-table");
            this.$bodyDiv = this.$wrapper.find(".dt-body");
            this.$bodyTable = this.$wrapper.find(".dt-body table.dt-table");
            if (this.pagedDataSource) {
                this.$footerDiv = this.$element.find(".dt-footer");
            }
            this.$headerTable.find(".sortable").on("click", function (evt) {
                var columnIndex = _this.$headerTable.find("th").index(evt.delegateTarget);
                if (_this.sortColumn == columnIndex) {
                    _this.sortReversed = !_this.sortReversed;
                }
                else {
                    _this.sortColumn = columnIndex;
                    _this.sortReversed = false;
                }
                _this.$headerTable.find(".sortable").removeClass("sortAsc").removeClass("sortDesc");
                $(evt.delegateTarget).addClass(_this.sortReversed ? "sortDesc" : "sortAsc");
                _this.reload();
            });
            if (this.pagedDataSource) {
                this.pagingControls = new PagingControls(this.elementId + "_paging", this.$footerDiv, this.settings.pageSize);
                this.pagingControls.onLoadPage(function (skip, take) {
                    _this.loadData(skip);
                });
            }
            var headerHeight = this.$headerTable.outerHeight(true) || 36;
            this.$wrapper.css({ "padding-top": headerHeight });
            this.$bodyTable.css({ "margin-top": -headerHeight });
            this.$headerTable.find("th:last-child").css({ "padding-right": "15px" });
            // Wire up scroll events on body to mirror and scroll column headers to match
            this.$bodyDiv.on("scroll", function (evt) {
                controls.Console.debug("scroll" + _this.$bodyDiv.scrollLeft());
                _this.$headerDiv.css("left", 0 - _this.$bodyDiv.scrollLeft());
            });
        };
        DataTable.prototype.renderTHEAD = function (isInteractive) {
            var columns = this.columns;
            var sortHeaderClass = this.sortReversed ? " sortDesc" : " sortAsc";
            var html = "<thead><tr>";
            for (var i = 0; i < columns.length; i++) {
                var s = columns[i].isSortable ? " class='sortable" + ((i === this.sortColumn) ? sortHeaderClass : "") + "'" : "";
                html += "<th" + s + "><span>" + HtmlUtil.escapeHtml(columns[i].title) + "</span></th>";
            }
            html += "</tr></thead>";
            return html;
        };
        DataTable.prototype.loadData = function (skip, callback) {
            var _this = this;
            if (callback === void 0) { callback = null; }
            this.$element.find("tbody").html("<tr><td colspan=" + this.columns.length + ">"
                + (this.settings.showLoadingMessage ? "<h3 class='loadingMessage'>Loading...</h3>" : "")
                + "</td></tr>\n");
            if (this.pagedDataSource) {
                var params = { skip: skip, take: this.settings.pageSize };
                if (this.sortColumn != null) {
                    params.sortBy = this.columns[this.sortColumn].sortBy || this.columns[this.sortColumn].dataProp;
                    params.sortDir = this.sortReversed ? "DESC" : "ASC";
                }
                this.pagedDataSource.getData(params, function (resultSet) {
                    _this.resultSet = resultSet;
                    _this.renderData();
                    if (callback)
                        callback();
                });
            }
            else if (this.simpleDataSource) {
                var dataSourceParams = {};
                if (this.sortColumn != null) {
                    dataSourceParams.sortBy = this.columns[this.sortColumn].sortBy || this.columns[this.sortColumn].dataProp;
                    dataSourceParams.sortDir = this.sortReversed ? "DESC" : "ASC";
                }
                this.simpleDataSource.getItems(dataSourceParams, function (items) {
                    _this.resultSet = {
                        totalItems: items.length,
                        offset: 0,
                        items: items
                    };
                    _this.renderData();
                    if (callback)
                        callback();
                });
            }
        };
        DataTable.prototype.renderData = function () {
            var _this = this;
            this.selectedIndexes = [];
            this.updateActionButtons();
            var html = "";
            if ((this.resultSet == null) || (this.resultSet.items == null) || (this.resultSet.items.length == 0)) {
                html = "<tr><td colspan=" + this.columns.length + ">No data to display.</td></tr>\n";
            }
            else {
                var columns = this.columns;
                for (var row = 0; row < this.resultSet.items.length; row++) {
                    var rowData = this.resultSet.items[row];
                    var isHidden = this.hideRowFunc ? this.hideRowFunc(rowData) : false;
                    html += "<tr id='" + this.rowID(row) + "'" + (isHidden ? " style='display:none;'" : "") + (this.settings.topAlignRows ? " class='align-top'" : "") + ">";
                    for (var col = 0; col < columns.length; col++) {
                        html += "<td>" + this.renderCellValue(rowData, columns[col], row) + "</td>";
                    }
                    html += "</tr>";
                }
            }
            this.$element.find("tbody").html(html);
            this.$element.find("tr")
                .on("click", function (evt) { _this.row_onClick(evt, false); })
                .on("dblclick", function (evt) { _this.row_onClick(evt, true); });
            this.updateColumnWidths();
            if (this.pagingControls) {
                this.pagingControls.update(this.resultSet);
            }
        };
        DataTable.prototype.renderCellValue = function (rowData, column, rowIndex) {
            try {
                var columnValue = column.dataProp ? rowData[column.dataProp] : null;
                if (column.renderer) {
                    // Can't escape this as rendered cells often contain HTML 
                    // It is up to the renderer to ensure that the HTML is safe
                    return column.renderer(rowData, columnValue, rowIndex) || "";
                }
                else {
                    if ((typeof columnValue != "undefined") && (columnValue != null)) {
                        return HtmlUtil.escapeHtml(String(columnValue));
                    }
                    else {
                        return "";
                    }
                }
            }
            catch (e) {
                return e;
            }
        };
        DataTable.prototype.row_onClick = function (evt, doubleClick) {
            var rowID = evt.delegateTarget.getAttribute("id");
            if (!rowID)
                return; // header
            var clickedRowIndex = Number(rowID.split("_")[1]);
            if (this.itemClickedHandler) {
                this.itemClickedHandler($.extend({
                    itemIndex: clickedRowIndex,
                    item: this.resultSet.items[clickedRowIndex],
                    doubleClick: doubleClick
                }, evt));
            }
            if (this.settings.selectionMode == SelectionMode.None)
                return;
            if (this.settings.selectionMode == SelectionMode.Toggle) {
                var currentlySelected = this.selectedIndexes.indexOf(clickedRowIndex) != -1;
                if (!currentlySelected) {
                    this.selectedIndexes.push(clickedRowIndex);
                    this.$element.find("#" + this.rowID(clickedRowIndex)).addClass("selected");
                }
                else {
                    this.selectedIndexes = this.selectedIndexes.filter(function (index) { return index != clickedRowIndex; });
                    this.$element.find("#" + this.rowID(clickedRowIndex)).removeClass("selected");
                }
            }
            else {
                var multiselect = this.settings.selectionMode == SelectionMode.Multi;
                if (!multiselect || (!(evt.ctrlKey || evt.metaKey) && !evt.shiftKey && this.selectedIndexes.length > 0)) {
                    // deselect everything
                    this.selectedIndexes = [];
                    this.$element.find("tr").removeClass("selected");
                }
                if (multiselect && evt.shiftKey && this.selectedIndexes.length > 0) {
                    // select all rows between existing selection and this row              
                    // capture the first selected row
                    var firstSelectedRow = this.selectedIndexes[0];
                    // then deselect everything - need to deselect anything outside the range
                    this.selectedIndexes = [];
                    this.$element.find("tr").removeClass("selected");
                    // then select all the rows from first to current
                    var numSelectedItems = Math.abs(clickedRowIndex - firstSelectedRow) + 1;
                    var step = (clickedRowIndex > firstSelectedRow) ? 1 : -1;
                    var index = firstSelectedRow;
                    for (var i = 0; i < numSelectedItems; i++) {
                        this.selectedIndexes.push(index);
                        this.$element.find("#" + this.rowID(index)).addClass("selected");
                        index += step;
                    }
                }
                else {
                    // select clicked row
                    this.selectedIndexes.push(clickedRowIndex);
                    this.$element.find("#" + this.rowID(clickedRowIndex)).addClass("selected");
                }
            }
            this.fireSelectionChangedEvent(doubleClick);
            this.updateActionButtons();
        };
        DataTable.prototype.fireSelectionChangedEvent = function (doubleClick) {
            if (this.selectionChangedHandler) {
                this.selectionChangedHandler({
                    selectedIndexes: this.selectedIndexes,
                    selectedItems: this.getSelectedItems(),
                    doubleClick: doubleClick
                });
            }
        };
        DataTable.prototype.updateActionButtons = function () {
            if (this.selectedIndexes.length > 0) {
                $("button.item-action,a.item-action").removeAttr("disabled");
                $("li.item-action").removeClass("disabled");
            }
            else {
                $("button.item-action,a.item-action").attr("disabled", "disabled");
                $("li.item-action").addClass("disabled");
            }
        };
        DataTable.prototype.rowID = function (rowIndex) {
            return "dt-" + this.elementId + "_" + rowIndex;
        };
        DataTable.prototype.calculateColumnWidths = function (minWidths) {
            var columns = this.columns;
            var tableWidth = this.$element.width() - 64; // leave room for vertical scroll bar
            var numFixedColumns = 0;
            var totalFixedColumnWidth = 0;
            for (var i = 0; i < columns.length; i++) {
                if ((typeof columns[i].width != "undefined") && (columns[i].width != null)) {
                    totalFixedColumnWidth += columns[i].width;
                    numFixedColumns++;
                }
            }
            var defautColumnWidth = Math.max((tableWidth - totalFixedColumnWidth) / (columns.length - numFixedColumns), 120);
            var tdWidths = [];
            for (var i = 0; i < columns.length; i++) {
                if ((typeof columns[i].width != "undefined") && (columns[i].width != null)) {
                    tdWidths.push(columns[i].width);
                }
                else {
                    tdWidths.push(Math.max(minWidths[i], defautColumnWidth));
                }
            }
            return tdWidths;
        };
        DataTable.prototype.updateColumnWidths = function () {
            if (this.columns) {
                var minWidths = [];
                // NOTE: use of 'function' rather than '=>' for callback so that 'this' within the function refers to the current element
                this.$headerTable.find("tr th").each(function (index) {
                    var width = $(this).find("span").outerWidth();
                    width += parseInt($(this).css("padding-left"), 10) + parseInt($(this).css("padding-right"), 10);
                    width += parseInt($(this).css("margin-left"), 10) + parseInt($(this).css("margin-right"), 10);
                    width += parseInt($(this).css("borderLeftWidth"), 10) + parseInt($(this).css("borderRightWidth"), 10);
                    minWidths.push(width);
                });
                var tdWidths = this.calculateColumnWidths(minWidths);
                // NOTE: use of 'function' rather than '=>' for callback so that 'this' within the function refers to the current element
                this.$headerTable.find("tr th").each(function (index) {
                    var width = tdWidths[index];
                    if (width != null) {
                        $(this).css('width', width);
                    }
                });
                // NOTE: use of 'function' rather than '=>' for callback so that 'this' within the function refers to the current element
                this.$bodyTable.find("tr th").each(function (index) {
                    var width = tdWidths[index];
                    if (width != null) {
                        $(this).css('width', width);
                    }
                });
                // Shrink header table to same width as body table to correct for width taken by vertical scrollbar
                this.$headerTable.width(this.$bodyTable.width());
                // Update margins
                var headerHeight = this.$headerTable.outerHeight(true) || 36;
                this.$wrapper.css({ "padding-top": headerHeight });
                this.$bodyTable.css({ "margin-top": -headerHeight });
            }
        };
        return DataTable;
    }(controls.Control));
    controls.DataTable = DataTable;
})(controls || (controls = {}));
